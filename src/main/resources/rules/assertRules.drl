package rules;

dialect 'mvel'

import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.atomic.AtomicInteger

rule 'before'
    salience 1
    when
        $object: Object()
    then
        System.out.println('before rules: ' + $object)
end

rule 'atomic int rule'
    when
        $atomicInteger: AtomicInteger()
    then
        $atomicInteger.incrementAndGet()
end

rule 'atomic long rule'
    when
        $atomicLong: AtomicLong()
    then
        $atomicLong.incrementAndGet()
end

rule 'atomic long from entrypoint'
    when
        $atomicLong: AtomicLong() from entry-point entrypoint
    then
        $atomicLong.incrementAndGet()
end

rule 'increment 10'
    when
        $atomicInteger: AtomicInteger(intValue == 10)
    then
        $atomicInteger.incrementAndGet()
end

rule 'after'
    salience -1
    when
        $object: Object()
    then
        System.out.println('after rules: ' + $object)
end